package UI.Utils;

import javax.swing.*;
import java.awt.*;
import java.util.ArrayList;
import java.util.List;

public class DoubleList<T> extends JPanel {
    private JPanel root;
    
    private JList<T> leftList;
    private JList<T> rightList;
    
    private JButton fromLeftToRight;
    private JButton fromRightToLeft;
    
    private DefaultListModel<T> leftListModel;
    private DefaultListModel<T> rightListModel;
    
    public DoubleList() {
        
        leftListModel = new DefaultListModel<T>();
        rightListModel = new DefaultListModel<T>();
        
        this.leftList.setModel(this.leftListModel);
        this.rightList.setModel(this.rightListModel);
        
        initListener();
        
    }
    
    private void initListener() {
        this.fromLeftToRight.addActionListener(event -> {
            this.moveSelectedElementOfAToB(this.leftListModel, this.rightListModel, this.leftList.getSelectedValuesList());
        });
        
        this.fromRightToLeft.addActionListener(event -> {
            this.moveSelectedElementOfAToB(this.rightListModel, this.leftListModel, this.rightList.getSelectedValuesList());
        });
    }
    
    public void addToLeftList(T element) {
        this.addToListModel(this.leftListModel, element);
    }
    
    public void addToRightList(T element) {
        this.addToListModel(this.rightListModel, element);
    }
    
    public void moveElementFromLeftToRight(T element) {
        List<T> list = new ArrayList<>();
        list.add(element);
        this.moveSelectedElementOfAToB(this.leftListModel, this.rightListModel, list);
    }
    
    private void addToListModel(DefaultListModel<T> listModel, T element) {
        listModel.addElement(element);
    }
    
    private void moveSelectedElementOfAToB(DefaultListModel<T> A, DefaultListModel<T> B, List<T> elementsToMove) {
        for (T element : elementsToMove) {
            A.remove(A.indexOf(element));
            B.addElement(element);
        }
    }
    
    public DefaultListModel<T> getLeftListModel() {
        return this.leftListModel;
    }
    
    public DefaultListModel<T> getRightListModel() {
        return this.rightListModel;
    }
    
    public List<T> getLeftSelected() {
        return this.leftList.getSelectedValuesList();
    }
    
    public void moveElementFromRightToLeft(T element) {
        List<T> list = new ArrayList<>();
        list.add(element);
        this.moveSelectedElementOfAToB(this.rightListModel, this.leftListModel, list);
    }
    
    public List<T> getRightSelected() {
        return this.rightList.getSelectedValuesList();
    }
    
    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }
    
    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        root = new JPanel();
        root.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(1, 3, new Insets(0, 0, 0, 0), -1, -1));
        leftList = new JList();
        root.add(leftList, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, null, new Dimension(150, 50), null, 0, false));
        rightList = new JList();
        root.add(rightList, new com.intellij.uiDesigner.core.GridConstraints(0, 2, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, null, new Dimension(150, 50), null, 0, false));
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(4, 1, new Insets(0, 0, 0, 0), -1, -1));
        root.add(panel1, new com.intellij.uiDesigner.core.GridConstraints(0, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        fromLeftToRight = new JButton();
        fromLeftToRight.setText("->");
        panel1.add(fromLeftToRight, new com.intellij.uiDesigner.core.GridConstraints(1, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        fromRightToLeft = new JButton();
        fromRightToLeft.setText("<-");
        panel1.add(fromRightToLeft, new com.intellij.uiDesigner.core.GridConstraints(2, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final com.intellij.uiDesigner.core.Spacer spacer1 = new com.intellij.uiDesigner.core.Spacer();
        panel1.add(spacer1, new com.intellij.uiDesigner.core.GridConstraints(3, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_VERTICAL, 1, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        final com.intellij.uiDesigner.core.Spacer spacer2 = new com.intellij.uiDesigner.core.Spacer();
        panel1.add(spacer2, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_VERTICAL, 1, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
    }
    
    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return root;
    }
    
}
